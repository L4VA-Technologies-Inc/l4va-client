/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsOfServiceRouteImport } from './routes/terms-of-service'
import { Route as SandboxRouteImport } from './routes/sandbox'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy'
import { Route as CreateRouteImport } from './routes/create'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VaultsIndexRouteImport } from './routes/vaults/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as VaultsMyRouteImport } from './routes/vaults/my'
import { Route as VaultsIdRouteImport } from './routes/vaults/$id'
import { Route as ProfileIdRouteImport } from './routes/profile/$id'

const TermsOfServiceRoute = TermsOfServiceRouteImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => rootRouteImport,
} as any)
const SandboxRoute = SandboxRouteImport.update({
  id: '/sandbox',
  path: '/sandbox',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyPolicyRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VaultsIndexRoute = VaultsIndexRouteImport.update({
  id: '/vaults/',
  path: '/vaults/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const VaultsMyRoute = VaultsMyRouteImport.update({
  id: '/vaults/my',
  path: '/vaults/my',
  getParentRoute: () => rootRouteImport,
} as any)
const VaultsIdRoute = VaultsIdRouteImport.update({
  id: '/vaults/$id',
  path: '/vaults/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIdRoute = ProfileIdRouteImport.update({
  id: '/profile/$id',
  path: '/profile/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/sandbox': typeof SandboxRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/profile/$id': typeof ProfileIdRoute
  '/vaults/$id': typeof VaultsIdRoute
  '/vaults/my': typeof VaultsMyRoute
  '/profile': typeof ProfileIndexRoute
  '/vaults': typeof VaultsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/sandbox': typeof SandboxRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/profile/$id': typeof ProfileIdRoute
  '/vaults/$id': typeof VaultsIdRoute
  '/vaults/my': typeof VaultsMyRoute
  '/profile': typeof ProfileIndexRoute
  '/vaults': typeof VaultsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/sandbox': typeof SandboxRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/profile/$id': typeof ProfileIdRoute
  '/vaults/$id': typeof VaultsIdRoute
  '/vaults/my': typeof VaultsMyRoute
  '/profile/': typeof ProfileIndexRoute
  '/vaults/': typeof VaultsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/privacy-policy'
    | '/sandbox'
    | '/terms-of-service'
    | '/profile/$id'
    | '/vaults/$id'
    | '/vaults/my'
    | '/profile'
    | '/vaults'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/privacy-policy'
    | '/sandbox'
    | '/terms-of-service'
    | '/profile/$id'
    | '/vaults/$id'
    | '/vaults/my'
    | '/profile'
    | '/vaults'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/privacy-policy'
    | '/sandbox'
    | '/terms-of-service'
    | '/profile/$id'
    | '/vaults/$id'
    | '/vaults/my'
    | '/profile/'
    | '/vaults/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  SandboxRoute: typeof SandboxRoute
  TermsOfServiceRoute: typeof TermsOfServiceRoute
  ProfileIdRoute: typeof ProfileIdRoute
  VaultsIdRoute: typeof VaultsIdRoute
  VaultsMyRoute: typeof VaultsMyRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  VaultsIndexRoute: typeof VaultsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms-of-service': {
      id: '/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof TermsOfServiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sandbox': {
      id: '/sandbox'
      path: '/sandbox'
      fullPath: '/sandbox'
      preLoaderRoute: typeof SandboxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vaults/': {
      id: '/vaults/'
      path: '/vaults'
      fullPath: '/vaults'
      preLoaderRoute: typeof VaultsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vaults/my': {
      id: '/vaults/my'
      path: '/vaults/my'
      fullPath: '/vaults/my'
      preLoaderRoute: typeof VaultsMyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vaults/$id': {
      id: '/vaults/$id'
      path: '/vaults/$id'
      fullPath: '/vaults/$id'
      preLoaderRoute: typeof VaultsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$id': {
      id: '/profile/$id'
      path: '/profile/$id'
      fullPath: '/profile/$id'
      preLoaderRoute: typeof ProfileIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  SandboxRoute: SandboxRoute,
  TermsOfServiceRoute: TermsOfServiceRoute,
  ProfileIdRoute: ProfileIdRoute,
  VaultsIdRoute: VaultsIdRoute,
  VaultsMyRoute: VaultsMyRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  VaultsIndexRoute: VaultsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
